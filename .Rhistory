for (i in 1:2) print i**2
for (i in 1:2) print (i**2)
for (i in 1:3) print (i**2)
for (i in seq_along(1:3)) print (i**2)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/calculate_tree_vector.R')
F_uno <- matrix(c(1, 1), 1, 2)
A <- matrix(c(0.150, 0.200, 0.250, 0.05), 2, 2)
L <- solve(diag(nrow(A))- A)
F_total <- F_uno %*% L
y <- matrix(c(100, 0), 2, 1)
sequence <- c(1, 2, 1)
sequence
sequence$current <- sequence
sequence
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
sequence
sequence <- NULL
tol
tol_lop <- function(percent){
total_emissions <- F_total %*% y
return(percent * total_emissions
}
tol_lop <- function(percent){
total_emissions <- F_total %*% y
return(percent * total_emissions)
}
tol_lop(0.01)
tol_lop <- function(percent){
total_emissions <- F_total %*% y
return(as.numeric(percent * total_emissions))
}
tol_lop(0.01)
tol <- tol_lop(0.01)
tol
sequence
sequence <- c(1, 2, 1)
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
T_cur <- 3
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
sequence_next <- NULL
T_cur <- 2
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/calculate_tree_vector.R')
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/calculate_tree_vector.R')
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
T_cur
sequence
sequence[T_cur]
sequence[1]
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/calculate_tree_vector.R')
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
sequence_next
i
sequence_next <- c(1 ,2 ,1 ,1)
sequence_next
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
?calculate_tree_vector
y
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
T_cur = 0
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
T_cur = 1
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
sequence
sequence(T_cur)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur)
T_cur
sequence_next
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 3)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 0)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 1)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 2)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 3)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 4)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, 5)
dims
dims = c(nrow(y), 1)
dims
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/calculate_tree_vector.R')
sequence
T_cur
sparseMatrix(sequence(T_cur), 1, x=5, dims=c(2, 1))
Matrix::sparseMatrix(sequence(T_cur), 1, x=5, dims=c(2, 1))
T_cur
Matrix::sparseMatrix(sequence(2), 1, x=5, dims=c(2, 1))
sequence(2)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/calculate_tree_vector.R')
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
tree_vector_value
N
N <- length(y)
N
sequence
sequence_next
null_tree
for (i in 1:N){
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
if (as.numeric(tree_vector_value) < tol){
cur_tree$nextstep[i] <- null_tree
}
for (i in 1:N){
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
if (as.numeric(tree_vector_value) < tol){
cur_tree$nextstep[i] <- null_tree
}
else {
cur_tree$nextstep[i] <- build_tree_func(F_uno, A, y, F_total, T_cur+1, T_max, tol, sequence_next)
}
}
)
T_cur <- 3
N
tree_vector_value
tol
cur_tree
# creating cur_tree
cur_tree <- array(numeric())
for (i in 1:N){
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
if (as.numeric(tree_vector_value) < tol){
cur_tree$nextstep[i] <- null_tree
}
else {
cur_tree$nextstep[i] <- build_tree_func(F_uno, A, y, F_total, T_cur+1, T_max, tol, sequence_next)
}
}
null_tree <- array(numeric())
for (i in 1:N){
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
if (as.numeric(tree_vector_value) < tol){
cur_tree$nextstep[i] <- null_tree
}
else {
cur_tree$nextstep[i] <- build_tree_func(F_uno, A, y, F_total, T_cur+1, T_max, tol, sequence_next)
}
}
traceback()
cur_tree
cur_tree$sequence <- sequence
for (i in 1:N){
#sequence$nextstep <- c(sequence, i) # gives concatenate, check and try replication : rep(sequence, times=i) if necessary 2) i can replaced as uint16(5) , revisit
sequence_next <- c(sequence, i)
tree_vector_value <- calculate_tree_vector(F_uno, A, y, F_total, sequence_next, T_cur+1)
if (as.numeric(tree_vector_value) < tol){
cur_tree$nextstep[i] <- null_tree
}
else {
cur_tree$nextstep[i] <- build_tree_func(F_uno, A, y, F_total, T_cur+1, T_max, tol, sequence_next)
}
}
cur_tree
tree_vector_value
tol
sequence_next
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_value.R')
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
null_tree
cur_tree
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
null_tree
cur_tree
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 4, tol, sequence)
build_tree_func(F_uno, A, y, F_total, T_cur = 4, T_max = 4, tol, sequence)
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 3, tol, sequence)
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 3, tol, sequence)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 3, tol, sequence)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, T_cur = 3, T_max = 3, tol, sequence)
build_tree_func(F_uno, A, y, F_total, T_cur = 2, T_max = 3, tol, sequence)
warnings()
build_tree_func(F_uno, A, y, F_total, 0, T_max = 3, tol, uint16(length=0))
library(mmap)
build_tree_func(F_uno, A, y, F_total, 0, T_max = 3, tol, uint16(length=0))
print(cur_tree)
source('~/pCloud Drive/Backups/LCAsoftwares/lca_codes/p_lca_textbook/build_tree_func.R')
build_tree_func(F_uno, A, y, F_total, 0, T_max = 3, tol, uint16(length=0))
